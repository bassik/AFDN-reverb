//======================Ambisonics Feedback Delay Network Library ========================
//========================================================================================

import("stdfaust.lib");

//--------------------------------`afdnrev0`---------------------------------
// Pure Feedback Delay Network Reverberator (generalized for easy scaling).
// `afdnrev0` is a standard Faust function.
//
// #### Usage
//
// ```
// <1,2,4,...,N signals> <:
// afdnrev0(MAXDELAY,delays,BBSO,freqs,durs,loopgainmax,nonl) :>
// <1,2,4,...,N signals>
// ```
//
// Where:
//
// * `N`: 2, 4, 8, ...  (power of 2)
// * `MAXDELAY`: power of 2 at least as large as longest delay-line length
// * `delays`: N delay lines, N a power of 2, lengths perferably coprime
// * `BBSO`: odd positive integer = order of bandsplit desired at freqs
// * `freqs`: NB-1 crossover frequencies separating desired frequency bands
// * `durs`: NB decay times (t60) desired for the various bands
// * `loopgainmax`: scalar gain between 0 and 1 used to "squelch" the reverb
// * `nonl`: nonlinearity (0 to 0.999..., 0 being linear)
//
// #### Reference
//
// <https://ccrma.stanford.edu/~jos/pasp/FDN_Reverberation.html>
// <https://github.com/nickgang/AFDN-reverb>
//------------------------------------------------------------
afdnrev0(MAXDELAY, delays, BBSO, freqs, durs, loopgainmax, nonl)
  = _ <: (si.bus(2*N) :> si.bus(N) : delaylines(N)) ~
    (delayfilters(N,freqs,durs) : feedbackmatrix(N))
with {
  N = ba.count(delays);
  NB = ba.count(durs);
//assert(count(freqs)+1==NB);
  delayval(i) = ba.take(i+1,delays);
  dlmax(i) = MAXDELAY; // must hardwire this from argument for now
//dlmax(i) = 2^max(1,nextpow2(delayval(i))) // try when slider min/max is known
//           with { nextpow2(x) = ceil(log(x)/log(2.0)); };
// -1 is for feedback delay:
  delaylines(N) = par(i,N,(de.delay(dlmax(i),(delayval(i)-1))));
  delayfilters(N,freqs,durs) = par(i,N,filter(i,freqs,durs));
  feedbackmatrix(N) = bhadamard(N);
  vbutterfly(n) = si.bus(n) <: (si.bus(n):>bus(n/2)) , ((si.bus(n/2),(si.bus(n/2):par(i,n/2,*(-1)))) :> si.bus(n/2));
  bhadamard(2) = si.bus(2) <: +,-;
  bhadamard(n) = si.bus(n) <: (si.bus(n):>si.bus(n/2)) , ((si.bus(n/2),(si.bus(n/2):par(i,n/2,*(-1)))) :> si.bus(n/2))
                 : (bhadamard(n/2) , bhadamard(n/2));

  // Experimental nonlinearities:
  // nonlinallpass = apnl(nonl,-nonl);
  // s = nonl*PI;
  // nonlinallpass(x) = allpassnn(3,(s*x,s*x*x,s*x*x*x)); // filters.lib
     nonlinallpass = _; // disabled by default (rather expensive)

  filter(i,freqs,durs) = fi.filterbank(BBSO,freqs) : par(j,NB,*(g(j,i)))
                         :> *(loopgainmax) / sqrt(N) : nonlinallpass
  with {
    dur(j) = ba.take(j+1,durs);
    n60(j) = dur(j)*ma.SR; // decay time in samples
    g(j,i) = exp(-3.0*log(10.0)*delayval(i)/n60(j));
        // ~ 1.0 - 6.91*delayval(i)/(SR*dur(j)); // valid for large dur(j)
  };
};

//--------------------------------`afdnEarly0`---------------------------------
// Early reflection section of Ambisonics FDN reverb, built on top of
// standard Faust function `afdnrev0`. Since we only want to add one set of N
// reflections to each channel, the feedback loop is eliminated.
//
// #### Usage
//
// ```
// <1,2,4,...,N signals> <:
// afdnrev0(MAXDELAY,delays,BBSO,freqs,durs,loopgainmax,nonl) :>
// <1,2,4,...,N signals>
// ```
//
// Where:
//
// * `N`: 2, 4, 8, ...  (power of 2)
// * `MAXDELAY`: power of 2 at least as large as longest delay-line length
// * `delays`: N delay lines, N a power of 2, lengths perferably coprime
// * `BBSO`: odd positive integer = order of bandsplit desired at freqs
// * `freqs`: NB-1 crossover frequencies separating desired frequency bands
// * `durs`: NB decay times (t60) desired for the various bands
// * `loopgainmax`: scalar gain between 0 and 1 used to "squelch" the reverb
// * `nonl`: nonlinearity (0 to 0.999..., 0 being linear)
//
// #### Reference
//
// <https://ccrma.stanford.edu/~jos/pasp/FDN_Reverberation.html>
// <https://github.com/nickgang/AFDN-reverb>
//------------------------------------------------------------
afdnEarly0(MAXDELAY, delays, BBSO, freqs, durs, loopgainmax, nonl)
  = _ <: (si.bus(N) : delaylines(N)) : (delayfilters(N,freqs,durs) :
    feedforwardmatrix(N)) :> *(1/N)
with {
  N = ba.count(delays);
  NB = ba.count(durs);
//assert(count(freqs)+1==NB);
  delayval(i) = ba.take(i+1,delays);
  dlmax(i) = MAXDELAY; // must hardwire this from argument for now
//dlmax(i) = 2^max(1,nextpow2(delayval(i))) // try when slider min/max is known
//           with { nextpow2(x) = ceil(log(x)/log(2.0)); };
// -1 is for feedback delay:
  delaylines(N) = par(i,N,(de.delay(dlmax(i),(delayval(i)-1))));
  delayfilters(N,freqs,durs) = par(i,N,filter(i,freqs,durs));
  feedforwardmatrix(N) = bhadamard(N);
  vbutterfly(n) = si.bus(n) <: (si.bus(n):>bus(n/2)) , ((si.bus(n/2),(si.bus(n/2):par(i,n/2,*(-1)))) :> si.bus(n/2));
  bhadamard(2) = si.bus(2) <: +,-;
  bhadamard(n) = si.bus(n) <: (si.bus(n):>si.bus(n/2)) , ((si.bus(n/2),(si.bus(n/2):par(i,n/2,*(-1)))) :> si.bus(n/2))
                 : (bhadamard(n/2) , bhadamard(n/2));

  // Experimental nonlinearities:
  // nonlinallpass = apnl(nonl,-nonl);
  // s = nonl*PI;
  // nonlinallpass(x) = allpassnn(3,(s*x,s*x*x,s*x*x*x)); // filters.lib
     nonlinallpass = _; // disabled by default (rather expensive)

  filter(i,freqs,durs) = fi.filterbank(BBSO,freqs) : par(j,NB,*(g(j,i)))
                         :> *(loopgainmax) / sqrt(N) : nonlinallpass
  with {
    dur(j) = ba.take(j+1,durs);
    n60(j) = dur(j)*ma.SR; // decay time in samples
    g(j,i) = exp(-3.0*log(10.0)*delayval(i)/n60(j));
        // ~ 1.0 - 6.91*delayval(i)/(SR*dur(j)); // valid for large dur(j)
  };
};
//--------------------------------`hoaRotate`---------------------------------
// Rotation of early reflections for Ambisonics FDN reverb
// For now, built using rotate method from HOA lib
// TODO: Replace hoa.lib function with one that supports ACN ordering
//
// #### Usage
//
// ```
// <1,2,4,...,N signals> <:
// afdnRotate(N,angle) :>
// <1,2,4,...,N signals>
// ```
//
// Where:
//
// * `O`: 0, 1, 2, 3  (Ambisonics Order)
// * `angle`: rotation angle (radians)
//
// #### Reference
//
// <https://github.com/nickgang/AFDN-reverb>
hoaRotate(O,theta) = si.bus(A) <: si.bus(2*A) : rot(theta),rot(-theta) :> si.bus(A)
with{
  A = (O+1)^2; // Get order from number of channels
  // Three rotations in parallel
  rot(theta) = si.bus(A)<:_,rotateFirst(theta),
                      (passSecond(A):rotateSecond(theta)),
                      (passThird(A):rotateThird(theta))
  with{
    firstOrdCoeffs(n,theta)=ba.take(n+1,(cos(theta),0,sin(theta),
                              0,1,0,-1*sin(theta),0,cos(theta)));
    secondOrdCoeffs(m,theta)=ba.take(m+1,
      (cos(2*theta),0,0,0,sin(2*theta),
      0,cos(theta),0,-1*sin(theta),0,
      0,0,1,0,0,
      0,sin(theta),0,cos(theta),0,
      -1*sin(2*theta),0,0,0,cos(2*theta)
    ));
    thirdOrdCoeffs(l,theta)=ba.take(l+1,
      (cos(3*theta),0,0,0,0,0,-1*sin(3*theta),
      0,cos(2*theta),0,0,0,sin(2*theta),0,
      0,0,cos(theta),0,sin(theta),0,0,
      0,0,0,1,0,0,0,
      0,0,sin(theta),0,cos(theta),0,0,
      0,sin(2*theta),0,0,0,cos(2*theta),0,
      sin(3*theta),0,0,0,0,0,cos(3*theta)
    ));
    passSecond(A) = par(i,5,select2(A>4,_,0));
    passThird(A) = par(i,7,select2(A>9,_,0));
    rotateFirst(theta) = si.bus(3)<:(par(i,3,_*firstOrdCoeffs(i,theta)):>_),
       (par(i,3,_*firstOrdCoeffs(i+3,theta)):>_),(par(i,3,_*firstOrdCoeffs(i+6,theta)):>_);

    //par(i,5,*(A>4))
    rotateSecond(theta)=si.bus(5)<:
          (par(i,5,_*secondOrdCoeffs(i,theta)):>_),(par(i,5,_*secondOrdCoeffs(i+5,theta)):>_),
          (par(i,5,_*secondOrdCoeffs(i+10,theta)):>_),(par(i,5,_*secondOrdCoeffs(i+15,theta)):>_),
          (par(i,5,_*secondOrdCoeffs(i+20,theta)):>_);
    //par(i,7,*(A>9))
    rotateThird(theta)=si.bus(7)<:
           (par(i,7,_*thirdOrdCoeffs(i,theta)):>_),(par(i,7,_*thirdOrdCoeffs(i+7,theta)):>_),
           (par(i,7,_*thirdOrdCoeffs(i+14,theta)):>_),(par(i,7,_*thirdOrdCoeffs(i+21,theta)):>_),
           (par(i,7,_*thirdOrdCoeffs(i+28,theta)):>_),(par(i,7,_*thirdOrdCoeffs(i+35,theta)):>_),
           (par(i,7,_*thirdOrdCoeffs(i+42,theta)):>_);
      };
};
